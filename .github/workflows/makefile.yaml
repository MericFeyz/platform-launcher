name: End2End Test

on:
  workflow_call:
    inputs:
      work:
        type: string
        required: true
        description: Type of the work
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD: 
        required: true
      DOCKER_PREFIX:
        required: true
          
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop
      - '**-debugtest'
jobs:
  build:
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_PREFIX: ${{ secrets.DOCKER_PREFIX }}
      PUSH_DRYRUN: 'True'
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: recursive
        
    - name: Test docker
      shell: bash
      run: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - name: Prepare platform
      shell: bash
      run: |
        export TERM=vt100
        cd util && \
        bash setup-ubuntu20.04.sh
    - name: Setup subrepos
      shell: bash
      run: |
        export TERM=vt100
        git submodule update --recursive --init
        make update

    - name: Build platform
      run: |
        set +o pipefail
        export TERM=vt100
        yes | DOCKER_TAG=test NODOCKERLOGIN=true DEBUG=true make build

    - name: E2E Test
      shell: bash
      run: |
        set +e
        export TERM=vt100
        export PATH=$PATH:/snap/bin
        make import-images DOCKER_TAG=test DEBUG=true
        docker image prune -a -f
        rm -rf oisp-*
        npm install nodemailer
        export NODOCKERLOGIN=true
        retval=2;
        export DOCKER_TAG=test
        export USE_LOCAL_REGISTRY=true
        until [ ${retval} -eq 0 ] || [ ${loops} -gt 3 ]; do
          make undeploy-oisp
          (for i in {1..20}; do sleep 60; echo .; done&) &&  make deploy-oisp-test
          make test
          retval=$?
          loops=$((loops+1))
        done
        echo Test return value: ${retval}
        exit ${retval}
        
    - name: Push images
      shell: bash
      if: inputs.work == 'Nightly'
      run: |
          export TERM=vt100
          docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
          # Tag passed "test" images as "latest"
          images=$(docker images --format "{{.Repository}}:{{.Tag}}"| grep :test)
          for image in $images; do
            newimage=$(echo $image | sed -r "s/:test/:latest/g" | sed -r "s/$DOCKER_PREFIX/oisp/g");
            docker tag $image $newimage;
          done
          #Start with latest tag, replace later by the real-tags
          DOCKER_TAG="latest"
          TARGET_DOCKER_TAG=nightly-`date -I`
          DOCKER_PUSH_LATEST=true
          # First push latest if applicable and then the real tag
          echo Now trying to push with Tag ${DOCKER_TAG} push latest ${DOCKER_PUSH_LATEST}
          if [ "$DOCKER_PUSH_LATEST" = "true" ]; then
            echo Pushing images with latest tag
            if [ -z "$PUSH_DRYRUN" ]; then
              make push-images DOCKER_PREFIX=oisp
            else
              echo Only dry run mode. Not pushing to dockerhub!
            fi
          fi
          # Now replace all latest tagged images by the real tag
          echo Now pushing images with tag $DOCKER_TAG
          images=$(docker images --format "{{.Repository}}:{{.Tag}}"| grep :latest | grep "oisp/")
          for image in $images; do
            newimage=$(echo $image | sed -r "s/:latest/:$TARGET_DOCKER_TAG/g");
            echo tagging $image to $newimage;
            docker tag $image $newimage
            if [ -z "$PUSH_DRYRUN" ]; then
              docker push ${newimage}
            else
              echo Only dry run mode. Not pushing to dockerhub!
            fi
          done
          
    - name: debug with upterm
      if: failure()
      uses: lhotari/action-upterm@v1

